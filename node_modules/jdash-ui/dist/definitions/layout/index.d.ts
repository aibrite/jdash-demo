/// <reference path="../../src/layout/interact.d.ts" />
/// <reference types="es6-promise" />
import { Dashboard } from '../dashboard';
import { DashletModel, DashletPositionModel, LayoutModel } from 'jdash-core';
import { IDashletElement } from '../dashboard/dashlet';
import { KeyValue, ComponentElement } from './../core';
export interface IDashboardLayout extends HTMLElement {
}
export declare let LayoutViewMode: {
    readonly: string;
    layoutedit: string;
    dashletedit: string;
    editable: string;
};
export declare class DashboardLayout extends ComponentElement implements IDashboardLayout {
    _viewMode: string;
    dashletsHidden: boolean;
    dashletsCollapsed: boolean;
    _layoutStyle: string;
    private _dashletsCollapsedByLayout;
    dashboard: Dashboard;
    discardedAttributesOnClone: {
        'j-type': string[];
    };
    getType(): string;
    getStyles(): KeyValue<string>;
    layoutStyle: string;
    getModel(): LayoutModel;
    removeZoneActionHandler(event: CustomEvent): void;
    moveSectionActionHandler(event: CustomEvent): void;
    cloneZoneActionHandler(event: CustomEvent): void;
    editSectionTitle(section: HTMLElement, header: string): string;
    editSectionTitleActionHandler(event: CustomEvent): void;
    removeSectionActionHandler(event: CustomEvent): void;
    editzoneGroupTitle(container: HTMLElement, header: string): string;
    moveZoneGroupActionHandler(event: CustomEvent): void;
    cloneZoneGroupActionHandler(event: CustomEvent): void;
    editZoneGroupTitleActionHandler(event: CustomEvent): void;
    removeZoneGroupActionHandler(event: CustomEvent): void;
    makeZoneGroupActionHandler(event: CustomEvent): void;
    cloneSectionActionHandler(event: CustomEvent): void;
    resetSectionActionHandler(event: CustomEvent): void;
    moveZoneActionHandler(event: CustomEvent): void;
    setColumnWidths4Zones(zoneElements: NodeListOf<Element>): void;
    setColumnWidths(): void;
    getElementWeigth(el: HTMLElement): number;
    changeElementWeigth(el: HTMLElement, delta: number, max?: number): void;
    changeElementWeigths(els: NodeListOf<HTMLElement>, delta: number, max?: number): void;
    resizeZoneActionHandler(event: CustomEvent): void;
    getDashlets(): NodeListOf<IDashletElement>;
    makeDashletsDragable(enable: boolean): void;
    hideDashlets(hide: boolean): void;
    toggleDashlets(): void;
    collapseDashlet(dashlet: IDashletElement, collapse: boolean): void;
    collapseDashlets(collapse: boolean): void;
    toggleCollapseDashlets(): void;
    viewMode: string;
    setViewMode(newVal: string): void;
    initializeElement(): void;
    setDashletViewMode(newMode: string, targets: IDashletElement | NodeListOf<IDashletElement>): void;
    setDashletEditMode(edit: boolean): void;
    setLayoutMode4Zone(targets: Node | NodeListOf<any>): void;
    setLayoutMode4Section(container: Element | HTMLElement): void;
    setLayoutMode4ZoneGroup(container: HTMLElement): void;
    load(model: LayoutModel, dashlets: Array<DashletModel>): void;
    save(): Promise<any>;
    setLayoutEditMode(edit: boolean): void;
    generateDashletElement(model: DashletModel, status: string): IDashletElement;
    attributeChangedCallback(name: string, oldVal: string, newVal: string): void;
    createDropzoneElement(instance?: string): HTMLElement;
    dropActiveForElement(el: HTMLElement): void;
    dropEndForElement(el: HTMLElement): void;
    makeZonesDroppable(enable: boolean): void;
    makeDashletDragable(dashletElement: IDashletElement, enable: boolean): void;
    createDashletDropzones(excludeList?: Array<HTMLElement>): void;
    clearDropZones(instance?: string): void;
    generateLayoutContent(newContent?: string): void;
    createChildren(parent: HTMLElement): void;
    listenforActions(): void;
    connectedCallback(): void;
    makeDroppable(selector: string, enable: boolean, context?: HTMLElement, container?: HTMLElement): void;
    setDashletProperties(dashletElement: IDashletElement): void;
    createPanelForDashlet(dashletElement: IDashletElement): HTMLElement;
    normalizePosition(pos?: DashletPositionModel): DashletPositionModel;
    autoArrangeElements(zoneId: string, type: string): void;
    getPositionalChanges(from: DashletPositionModel, to: DashletPositionModel): NodeListOf<IDashletElement>;
    placeDashlet(dashletElement: IDashletElement, to?: DashletPositionModel): Promise<any>;
    removeDashlet(dashletElement: IDashletElement): Promise<void>;
    cloneDashlet(dashletElement: IDashletElement): Promise<any>;
    reset(newMode?: string): void;
    getElementPosition(el: Element): DashletPositionModel;
    setElementPosition(el: IDashletElement | HTMLElement, position: DashletPositionModel): void;
    moveDashlet(dashletElement: IDashletElement, to: DashletPositionModel): Array<IDashletElement>;
    getDashletsByPosition(position: DashletPositionModel): NodeListOf<Element>;
    getDashletAt(position: DashletPositionModel): Element;
}
